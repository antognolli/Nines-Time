#!/usr/bin/python

from os.path import abspath, join
from ecore.evas import SoftwareX11
from ecore import main_loop_begin, main_loop_quit, animator_frametime_set, \
        timer_add
from edje import Edje
from collections import defaultdict
from functools import partial
from time import strftime, gmtime
from emotion import Emotion

DATA_DIR = abspath("./data")
THEME = join(DATA_DIR, "theme", "default.edj")
MENU_MUSIC = "flanicx_-_2_dias_(synth_wave_gap_solo).mp3"
GAME_MUSIC = "annabloom_-_Percussion_Loops_1a_(5_4).mp3"
OPS_SOUND = "111872__candlegravity__tweak_scratch_2.wav"
RIGHT_SOUND = "111877__candlegravity__zipper_1.wav"
WRONG_SOUND = "111873__candlegravity__tweat_down_1.wav"


hooks = defaultdict(list)

class Operation:
    def __init__(self, game, signal):
        self.signal = signal
        self.game = game
        self.cooldown = 0
        self.game.part_drag_value_set(self.signal + "_block", 0, 1)

    def decrease_cooldown(self):
        self.cooldown = self.cooldown - 20
        drag = 1 - self.cooldown / 100.
        self.game.part_drag_value_set(self.signal + "_block", 0, drag)
        return self.cooldown

    def fire(self):
        if self.cooldown:
            return
        self.game.signal_emit(self.signal, "")
        fire_hooks("sound", OPS_SOUND)
        self.cooldown = 100
        timer_add(0.5, self.decrease_cooldown)
        self.game.signal_emit(self.signal, "")
        drag = 1 - self.cooldown / 100.
        self.game.part_drag_value_set(self.signal + "_block", 0, drag)


class Player:
    def  __init__(self, ee):
        game = ee.data["game"]
        self.minus = Operation(game, "minus")
        self.plus = Operation(game, "plus")
        self.times = Operation(game, "times")
        self.over = Operation(game, "over")
        self.score = 0
        self.ee = ee

    def score_inc(self, delta):
        self.score = self.score + delta


def add_hook(kind, fn, *args, **kwargs):
    hooks[kind].append(partial(fn, *args, **kwargs))

def fire_hooks(kind, *args, **kwargs):
    for hook in hooks[kind]:
        hook(*args, **kwargs)

def resize_cb(ee):
    for d in ["bg", "menu", "game", "win", "lose"]:
        ee.data[d].size = ee.evas.size

def win_screen(ee):
    def _on_show():
        win.focus = True
        win.show()

    def _on_key_down(obj, event):
        kn = event.keyname
        if kn  == "Escape":
            win.hide()
            fire_hooks("show_menu")

    win = Edje(ee.evas, file=THEME, group="win")
    win.size = ee.evas.size
    win.on_key_down_add(_on_key_down)
    ee.data["win"] = win
    add_hook("win", _on_show)

def lose_screen(ee):
    def _on_show():
        lose.focus = True
        lose.show()

    def _on_key_down(obj, event):
        kn = event.keyname
        if kn  == "Escape":
            lose.hide()
            fire_hooks("show_menu")

    lose = Edje(ee.evas, file=THEME, group="lose")
    lose.size = ee.evas.size
    lose.on_key_down_add(_on_key_down)
    ee.data["lose"] = lose
    add_hook("lose", _on_show)

def game_screen(ee):
    def _tick(ee):
        ee.data["time"] = ee.data["time"] - 1
        time = strftime("%M:%S", gmtime(ee.data["time"]))
        ee.data["game"].part_text_set("time", time)
        if (ee.data["time"] < 1):
            game.hide()
            fire_hooks("win")
            return False
        return True

    def _on_show(ee):
        ee.data["game"].part_text_set("time", "09:00")
        ee.data["time"] = 540
        ee.data["timer"] = timer_add(1, _tick, ee)
        fire_hooks("music", GAME_MUSIC)
        ee.data["player"] = Player(ee)
        game.focus = True
        game.show()

    def _on_key_down(obj, event, ee):
        kn = event.keyname
        if kn  == "Escape":
            ee.data["timer"].delete()
            game.hide()
            fire_hooks("show_menu")
        elif kn  == "equal":
            ee.data["player"].plus.fire()
        elif kn  == "minus":
            ee.data["player"].minus.fire()
        elif kn  == "8":
            ee.data["player"].times.fire()
        elif kn  == "slash":
            ee.data["player"].over.fire()

    game = Edje(ee.evas, file=THEME, group="game")
    game.size = ee.evas.size
    game.on_key_down_add(_on_key_down, ee)
    ee.data["game"] = game
    add_hook("start_game", _on_show, ee)

def menu_screen(ee):
    def _on_show():
        menu.focus = True
        fire_hooks("music", MENU_MUSIC)
        menu.show()

    def _on_key_down(obj, event):
        kn = event.keyname
        if kn  == "Escape":
            main_loop_quit()
        elif kn == "Return":
            menu.hide()
            fire_hooks("start_game")

    menu = Edje(ee.evas, file=THEME, group="menu")
    menu.size = ee.evas.size
    menu.on_key_down_add(_on_key_down)
    menu.focus = True
    fire_hooks("music", MENU_MUSIC)
    menu.show()
    ee.data["menu"] = menu
    add_hook("show_menu", _on_show)

def sweet_emotion(ee):
    def play(player, source = ""):
        if source:
            file_path = join(DATA_DIR, "sound", source)
        else:
            file_path = player.file
        player.file = ""
        player.file = file_path
        player.play = True

    music_player = Emotion(ee.evas, module_filename="gstreamer")
    music_player.on_playback_finished_add(play)
    sound_player = Emotion(ee.evas, module_filename="gstreamer")
    add_hook("music", play, music_player)
    add_hook("sound", play, sound_player)

def game_main():
    # FIXME get it from a file so user don't need to change it every time
    screen_size = (400, 600)
    ee = SoftwareX11(w=screen_size[0], h=screen_size[1])

    canvas = ee.evas
    bg = canvas.Rectangle(color=(0, 0, 0, 255))
    bg.size = canvas.size
    bg.show()

    ee.data["bg"] = bg
    ee.data["score"] = 0
    # FIXME get it from a file
    ee.data["hi-score"] = 0
    ee.size_min_set(*screen_size)
    ee.callback_resize = resize_cb
    ee.title = "Nines Time"

    sweet_emotion(ee)
    menu_screen(ee)
    game_screen(ee)
    win_screen(ee)
    lose_screen(ee)

    # Sets the framerate of the game to 60FPS
    animator_frametime_set(1.0 / 60.0)

    ee.show()
    main_loop_begin()

    del canvas
    del ee


if __name__ == "__main__":
    game_main()
